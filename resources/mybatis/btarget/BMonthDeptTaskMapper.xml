<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BMonthDeptTaskMapper">

    <sql id="bMonthDeptTaskColumns">
        B_YEAR_DEPT_TASK_ID,
        B_YEAR_TARGET_CODE,
        DEPT_CODE,
        EMP_CODE,
        YEAR,
        MONTH,
        MONTH_START_DATE,
        MONTH_END_DATE,
        MONTH_COUNT,
        MONEY_COUNT,
        STATUS,
        ISDEL,
        CREATE_USER,
        CREATE_TIME,
        UPDATE_USER,
        UPDATE_TIME
    </sql>

    <!-- 查询部门年度目标分解记录（分解到每个月的情况） -->
    <select id="getMonthDeptTaskList" parameterType="pd" resultType="pd">
        SELECT
        s1.ID,
        s1.B_YEAR_DEPT_TASK_ID,
        s1.B_YEAR_TARGET_CODE,
        s1.DEPT_CODE,
        s1.EMP_CODE,
        IFNULL(s1.YEAR, tm.y) YEAR,
        IFNULL(s1.MONTH, tm.m) MONTH,
        s1.MONTH_START_DATE,
        s1.MONTH_END_DATE,
        IFNULL(s1.MONTH_COUNT,0) AS MONTH_COUNT,
        IFNULL(s1.MONEY_COUNT,0) AS MONEY_COUNT,
        IFNULL(t1.REAL_COUNT,0) AS REAL_COUNT,
        IFNULL(t1.REAL_COUNT_MONEY,0) AS REAL_COUNT_MONEY,
        IFNULL(IFNULL(s1.MONTH_COUNT,0) - t1.REAL_COUNT, 0) AS DIFF_COUNT,
        IFNULL(IFNULL(s1.MONEY_COUNT,0) - t1.REAL_COUNT_MONEY, 0) AS DIFF_COUNT_MONEY,
        s1.STATUS,
        s1.ISDEL,
        s1.CREATE_USER,
        s1.CREATE_TIME,
        s1.UPDATE_USER,
        s1.UPDATE_TIME,
        IF(CONCAT(tm.y, tm.m) BETWEEN DATE_FORMAT(#{START_DATE}, '%Y%m') AND DATE_FORMAT(#{END_DATE}, '%Y%m'), 'true',
        'false') AS TO_USE,
        IF(CONCAT(tm.y, tm.m) >= DATE_FORMAT(NOW(), '%Y%m'), 'true', 'false') AS TO_CHANGE,
        IF(STR_TO_DATE(CONCAT(tm.y, tm.m, '01'), '%Y%m%d') > #{START_DATE}, STR_TO_DATE(CONCAT(tm.y, tm.m, '01'),
        '%Y%m%d'), STR_TO_DATE(#{START_DATE}, '%Y-%m-%d'))
        AS MONTH_START_DATE_CUL,
        IF(LAST_DAY(STR_TO_DATE(CONCAT(tm.y, tm.m), '%Y%m')) &lt; #{END_DATE},
        DATE_FORMAT(LAST_DAY(STR_TO_DATE(CONCAT(tm.y, tm.m), '%Y%m')),'%Y-%m-%d'), #{END_DATE})
        AS MONTH_END_DATE_CUL
        FROM ( SELECT #{YEAR} y, '01' m
        UNION SELECT #{YEAR}, '02'
        UNION SELECT #{YEAR}, '03'
        UNION SELECT #{YEAR}, '04'
        UNION SELECT #{YEAR}, '05'
        UNION SELECT #{YEAR}, '06'
        UNION SELECT #{YEAR}, '07'
        UNION SELECT #{YEAR}, '08'
        UNION SELECT #{YEAR}, '09'
        UNION SELECT #{YEAR}, '10'
        UNION SELECT #{YEAR}, '11'
        UNION SELECT #{YEAR}, '12'
        ) tm
        LEFT JOIN b_month_dept_task s1 ON tm.m = s1.MONTH AND tm.y = s1.YEAR AND s1.ISDEL = 0 AND s1.B_YEAR_DEPT_TASK_ID
        =${ID}
        LEFT JOIN(
        <!-- 
        	SELECT t2.B_MONTH_DEPT_TASK_ID, IFNULL(SUM(t4.DAILY_COUNT), 0) AS REAL_COUNT 
        	FROM b_month_emp_target t2 
        	LEFT JOIN b_week_emp_task t3 ON t3.B_MONTH_EMP_TARGET_ID=t2.ID
        	LEFT JOIN b_daily_emp_task t4 ON t4.B_WEEK_EMP_TASK_ID = t3.ID
        	 -->
        SELECT
        t2.B_MONTH_DEPT_TASK_ID,
        SUM(s3.`REAL_COUNT`) AS REAL_COUNT,
        SUM(s3.`REAL_COUNT_MONEY`) AS REAL_COUNT_MONEY
        FROM
        b_month_emp_target t2
        LEFT JOIN (
        SELECT
        t3.B_MONTH_EMP_TARGET_ID,
        SUM(s2.`REAL_COUNT`) AS REAL_COUNT,
        SUM(s2.`REAL_COUNT_MONEY`) AS REAL_COUNT_MONEY
        FROM
        b_week_emp_task t3
        LEFT JOIN (
        SELECT
        t4.B_WEEK_EMP_TASK_ID,
        SUM(t4.DAILY_COUNT) AS REAL_COUNT,
        SUM(t4.MONEY_COUNT) AS REAL_COUNT_MONEY
        FROM
        b_daily_emp_task t4
        GROUP BY
        t4.B_WEEK_EMP_TASK_ID
        ) s2 ON (
        s2.B_WEEK_EMP_TASK_ID = t3.ID
        )
        GROUP BY
        t3.B_MONTH_EMP_TARGET_ID
        ) s3 ON (
        s3.B_MONTH_EMP_TARGET_ID = t2.ID
        )
        GROUP BY
        t2.B_MONTH_DEPT_TASK_ID
        ) t1 ON t1.B_MONTH_DEPT_TASK_ID=s1.ID
        order by MONTH asc
    </select>

    <select id="getMonthTaskListByYear" parameterType="pd" resultType="pd">
        SELECT
            s1.ID,
            s1.B_YEAR_DEPT_TASK_ID,
            s1.B_YEAR_TARGET_CODE,
            s1.DEPT_CODE,
            s1.EMP_CODE,
            s1.YEAR,
            s1.MONTH,
            s1.MONTH_START_DATE,
            s1.MONTH_END_DATE,
            IFNULL(s1.MONTH_COUNT,0) AS MONTH_COUNT,
            IFNULL(s1.REAL_COUNT,0) AS REAL_COUNT,
            IFNULL(s1.DIFF_COUNT,0) AS DIFF_COUNT,
            s1.STATUS,
            s1.ISDEL,
            s1.CREATE_USER,
            s1.CREATE_TIME,
            s1.UPDATE_USER,
            s1.UPDATE_TIME, 
            CONVERT((
                CASE
                WHEN (
                    ym.yearmonth BETWEEN DATE_FORMAT(#{START_DATE}, '%Y%m')
                    AND DATE_FORMAT(#{END_DATE}, '%Y%m')
                ) THEN
                    'true'
                ELSE
                    'false'
                END
            ),CHAR) AS TO_USE,
            CONVERT((
                CASE
                WHEN (
                    ym.yearmonth >= DATE_FORMAT(NOW(), '%Y%m')
                ) THEN
                    'true'
                ELSE
                    'false'
                END
            ),CHAR) AS TO_CHANGE,
            CONVERT(SUBSTRING(ym.yearmonth, 1, 4),CHAR) AS YEAR_NUM,
            CONVERT (SUBSTRING(ym.yearmonth, 5, 2),CHAR )AS MONTH_NUM,
            CONVERT ((
                CASE
                WHEN (
                    last_day(
                        STR_TO_DATE(ym.yearmonth, '%Y%m')
                    ) &lt; #{END_DATE}
                ) THEN
                    last_day(
                        STR_TO_DATE(ym.yearmonth, '%Y%m')
                    )
                ELSE
                    #{END_DATE}
                END
            ),CHAR )AS MONTH_END_DATE_CUL,
            CONVERT( (
                CASE
                WHEN (
                    STR_TO_DATE(
                        CONCAT(ym.yearmonth, '01'),
                        '%Y%m%d'
                    ) &gt; #{START_DATE}
                ) THEN
                    STR_TO_DATE(
                        CONCAT(ym.yearmonth, '01'),
                    '%Y%m%d'
                )
                ELSE
                    #{START_DATE}
                END
            ) ,CHAR) AS MONTH_START_DATE_CUL
        FROM
            yearmonth ym
        LEFT JOIN (
            SELECT
                t1.ID,
                t1.B_YEAR_DEPT_TASK_ID,
                t1.B_YEAR_TARGET_CODE,
                t1.DEPT_CODE,
                t1.EMP_CODE,
                t1. YEAR,
                t1. MONTH,
                t1.MONTH_START_DATE,
                t1.MONTH_END_DATE,
                IFNULL(t1.MONTH_COUNT, 0) AS MONTH_COUNT,
                t1. STATUS,
                t1.ISDEL,
                t1.CREATE_USER,
                t1.CREATE_TIME,
                t1.UPDATE_USER,
                t1.UPDATE_TIME,
                IFNULL(s4.`REAL_COUNT`, 0) AS REAL_COUNT,
                IFNULL(IFNULL(t1.`MONTH_COUNT`,0) - IFNULL(s4.`REAL_COUNT`,0), 0) AS DIFF_COUNT
            FROM
                b_month_dept_task t1
            LEFT JOIN (
                SELECT
                    t2.B_MONTH_DEPT_TASK_ID,
                    SUM(s3.`REAL_COUNT`) AS REAL_COUNT
                FROM
                    b_month_emp_target t2
                LEFT JOIN (
                    SELECT
                        t3.B_MONTH_EMP_TARGET_ID,
                        SUM(s2.`REAL_COUNT`) AS REAL_COUNT
                    FROM
                        b_week_emp_task t3
                    LEFT JOIN (
                        SELECT
                            t4.B_WEEK_EMP_TASK_ID,
                            SUM(t4.DAILY_COUNT) AS REAL_COUNT
                        FROM
                            b_daily_emp_task t4
                        GROUP BY
                            t4.B_WEEK_EMP_TASK_ID
                    ) s2 ON (
                        s2.B_WEEK_EMP_TASK_ID = t3.ID
                    )
                    GROUP BY
                        t3.B_MONTH_EMP_TARGET_ID
                ) s3 ON (
                    s3.B_MONTH_EMP_TARGET_ID = t2.ID
                )
                GROUP BY
                    t2.B_MONTH_DEPT_TASK_ID
            ) s4 ON (
                s4.B_MONTH_DEPT_TASK_ID = t1.ID
            )
            WHERE
                t1.ISDEL = 0
            AND t1.B_YEAR_DEPT_TASK_ID = ${ID}
        ) s1 ON (
            SUBSTRING(ym.yearmonth, 1, 4) = s1.`YEAR`
            AND SUBSTRING(ym.yearmonth, 5, 2) = s1.`MONTH`
        )
        WHERE
            SUBSTRING(ym.yearmonth, 1, 4) = #{YEAR}
    </select>

    <!--批量更新-->
    <update id="batchUpdate" parameterType="pd">
        UPDATE b_month_dept_task
        SET
            MONTH_COUNT = #{MONTH_COUNT},
            MONEY_COUNT = #{MONEY_COUNT},
            ISDEL = 0,
            `STATUS` = #{STATUS},
            UPDATE_USER = #{UPDATE_USER},
            UPDATE_TIME = #{UPDATE_TIME}
        WHERE
            ID = ${ID}
    </update>

    <!--批量新增-->
    <insert id="batchAdd" parameterType="java.util.List" flushCache="false">
        INSERT INTO b_month_dept_task (
        <include refid="bMonthDeptTaskColumns"/>
        )
        VALUES
        <foreach item="item" index="index" collection="list" separator=",">
            (${item.B_YEAR_DEPT_TASK_ID},
            #{item.B_YEAR_TARGET_CODE},
            #{item.DEPT_CODE},
            #{item.EMP_CODE},
            #{item.YEAR},
            #{item.MONTH},
            #{item.MONTH_START_DATE},
            #{item.MONTH_END_DATE},
            #{item.MONTH_COUNT},
            #{item.MONEY_COUNT},
            #{item.STATUS},
            0,
            #{item.CREATE_USER},
            #{item.CREATE_TIME},
            #{item.UPDATE_USER},
            #{item.UPDATE_TIME}
            )
        </foreach>
    </insert>

    <!--批量新增历史数据-->
    <insert id="batchHisAdd" parameterType="java.util.List" flushCache="false">
        INSERT INTO b_month_dept_task_his (
        <include refid="bMonthDeptTaskColumns"/>
        )
        VALUES
        <foreach item="item" index="index" collection="list" separator=",">
            (${item.B_YEAR_DEPT_TASK_ID},
            #{item.B_YEAR_TARGET_CODE},
            #{item.DEPT_CODE},
            #{item.EMP_CODE},
            #{item.YEAR},
            #{item.MONTH},
            #{item.MONTH_START_DATE},
            #{item.MONTH_END_DATE},
            #{item.MONTH_COUNT},
            #{item.MONEY_COUNT},
            #{item.STATUS},
            0,
            #{item.UPDATE_USER},
            #{item.UPDATE_TIME},
            #{item.UPDATE_USER},
            #{item.UPDATE_TIME}
            )
        </foreach>
    </insert>

    <!--获取历史数据时间分组-->
    <select id="getHisTimeList" parameterType="pd" resultType="pd">
        SELECT
            t1.UPDATE_TIME, user.NAME USER_NAME, 
            SUM(t1.MONTH_COUNT) AS MONTH_COUNT_SUM,
            SUM(t1.MONEY_COUNT) AS MONEY_COUNT_SUM,
            (
                SELECT
                    t2.COUNT
                FROM
                    b_year_dept_task_his t2
                WHERE
                    MAX(t1.DEPT_CODE) = t2.DEPT_CODE
                AND MAX(t1.B_YEAR_TARGET_CODE) = t2.B_YEAR_TARGET_CODE
                AND t1.UPDATE_TIME > t2.UPDATE_TIME
                ORDER BY
                    t2.UPDATE_TIME DESC
                LIMIT 1
            ) AS HIS_COUNT,
            (
                SELECT
                    t2.MONEY_COUNT
                FROM
                    b_year_dept_task_his t2
                WHERE
                    MAX(t1.DEPT_CODE) = t2.DEPT_CODE
                AND MAX(t1.B_YEAR_TARGET_CODE) = t2.B_YEAR_TARGET_CODE
                AND t1.UPDATE_TIME > t2.UPDATE_TIME
                ORDER BY
                    t2.UPDATE_TIME DESC
                LIMIT 1
            ) AS HIS_COUNT_MONEY
        FROM
            b_month_dept_task_his t1
        LEFT JOIN sys_user user ON user.USERNAME = t1.CREATE_USER
        WHERE
            t1.B_YEAR_DEPT_TASK_ID = ${ID}
        AND t1.ISDEL = 0
        GROUP BY
            t1.UPDATE_TIME
        ORDER BY
            t1.UPDATE_TIME DESC
    </select>

    <!--按时间获取历史记录-->
    <select id="getHisMonthTaskListByYear" parameterType="pd" resultType="pd">
        SELECT
            s1.*, SUBSTRING(ym.yearmonth, 1, 4) AS YEAR_NUM,
            SUBSTRING(ym.yearmonth, 5, 2) AS MONTH_NUM
        FROM
            yearmonth ym
        LEFT JOIN (
            SELECT
                t1.*
            FROM
                b_month_dept_task_his t1
            WHERE
                t1.ISDEL = 0
            AND t1.B_YEAR_DEPT_TASK_ID = ${ID}
            AND t1.UPDATE_TIME = #{UPDATE_TIME}
        ) s1 ON (
            SUBSTRING(ym.yearmonth, 1, 4) = s1.`YEAR`
            AND SUBSTRING(ym.yearmonth, 5, 2) = s1.`MONTH`
        )
        WHERE
            SUBSTRING(ym.yearmonth, 1, 4) = #{YEAR}
    </select>

    <!--下发-->
    <update id="arrange" parameterType="pd">
        UPDATE b_month_dept_task
        SET
          `STATUS` = 'YW_YSX',
          UPDATE_TIME = #{UPDATE_TIME},
          UPDATE_USER = #{UPDATE_USER}
        WHERE
          B_YEAR_DEPT_TASK_ID = ${ID}
    </update>

    <!--获取任务的现有拆分-->
    <select id="getMonthTaskList" parameterType="String" resultType="pd">
        SELECT
            *
        FROM
            b_month_dept_task
        WHERE
            `STATUS` = 'YW_YSX'
        AND B_YEAR_DEPT_TASK_ID = ${ID}
    </select>

    <!--获取月度经营任务（部门）列表-->
    <select id="listPage" parameterType="pd" resultType="pd">
        SELECT
        t1.*, dept.DEPT_NAME,
        emp.EMP_NAME,
        pro.PRODUCT_NAME,
        t2.`NAME`,
        sta.`NAME` AS STATUS_NAME,
        IFNULL(s1.MONTH_COUNT_SUM,0) AS MONTH_COUNT_SUM,
        IF (
        IFNULL(s1.MONTH_COUNT_COUNT, 0) = 0,
        '未分解',
        IF (
        IFNULL(s2.YSX_MONTH_COUNT_COUNT, 0) = 0,
        '已分解（未生效）',
        '已分解（已生效）'
        )
        ) AS ISEXPLAIN,
        unit.UNIT_NAME,
        b_index.INDEX_NAME,
        <!-- 2016-07-07 yangdw 加入标志判断这条数据是否属于你 -->
        IF (
        t1.EMP_CODE = #{pd.USER_NUMBER},
        'YOURS',
        'NOT_YOURS'
        ) 'IS_YOURS'
        FROM
        b_month_dept_task t1
        JOIN b_year_target t2 ON t1.B_YEAR_TARGET_CODE = t2.`CODE`
        JOIN b_year_dept_task deptYearTask ON t1.B_YEAR_DEPT_TASK_ID = deptYearTask.`ID`
        JOIN bd_department dept ON t1.DEPT_CODE = dept.DEPT_CODE
        JOIN bd_employee emp ON t1.EMP_CODE = emp.EMP_CODE
        LEFT JOIN bd_product pro ON (deptYearTask.PRODUCT_CODE = pro.PRODUCT_CODE AND pro.ISDEL = 0)
        LEFT JOIN sys_status sta ON (t1.`STATUS` = sta.BIANMA AND sta.TYPE = 2)
        LEFT JOIN bd_unit unit ON (t2.UNIT_CODE = unit.UNIT_CODE AND unit.ISDEL = 0)
        LEFT JOIN bd_bussiness_index b_index ON (t2.INDEX_CODE = b_index.INDEX_CODE AND b_index.ISDEL = 0)
        LEFT JOIN (
        SELECT
        t3.B_MONTH_DEPT_TASK_ID,
        SUM(t3.MONTH_COUNT) AS MONTH_COUNT_SUM,
        COUNT(1) AS MONTH_COUNT_COUNT
        FROM
        b_month_emp_target t3
        GROUP BY
        t3.B_MONTH_DEPT_TASK_ID
        ) s1 ON (
        t1.ID = s1.B_MONTH_DEPT_TASK_ID
        )
        LEFT JOIN (
        SELECT
        t4.B_MONTH_DEPT_TASK_ID,
        COUNT(1) AS YSX_MONTH_COUNT_COUNT
        FROM
        b_month_emp_target t4
        WHERE
        t4.`STATUS` = 'YW_YSX'
        GROUP BY
        t4.B_MONTH_DEPT_TASK_ID
        ) s2 ON (
        t1.ID = s2.B_MONTH_DEPT_TASK_ID
        )
        WHERE
        t1.ISDEL = 0
        AND t2.ISDEL=0
        AND (
        t1.EMP_CODE = #{pd.USER_NUMBER}
        <!-- 2016-07-07 yangdw 加入数据权限 -->
        <if test="pd.sysDeptArr != null and pd.sysDeptArr != ''">
            OR t1.DEPT_CODE IN (
            <foreach item="item" index="index" collection="pd.sysDeptArr" separator=",">
                '${item}'
            </foreach>
            )
        </if>
        )
        AND t1.`STATUS` = 'YW_YSX'
        <!-- 起始时间检索 -->
        <if test="pd.START_DATE != null and pd.START_DATE != ''">
            AND t1.MONTH_START_DATE &gt;= #{pd.START_DATE}
        </if>
        <!-- 结束时间检索 -->
        <if test="pd.END_DATE != null and pd.END_DATE != ''">
            AND t1.MONTH_END_DATE &lt;= #{pd.END_DATE}
        </if>
        <!-- 状态检索 -->
        <if test="pd.STATUS != null and pd.STATUS != ''">
            AND t1.`STATUS` = #{pd.STATUS}
        </if>
        <!-- 产品检索 -->
        <if test="pd.PRODUCT_CODE != null and pd.PRODUCT_CODE != ''">
            AND t2.PRODUCT_CODE = #{pd.PRODUCT_CODE}
        </if>
        <!-- 关键字 -->
        <if test="pd.KEY_WORD != null and pd.KEY_WORD != ''">
            AND (t2.`NAME` LIKE "%"#{pd.KEY_WORD}"%" OR t2.`CODE` LIKE "%"#{pd.KEY_WORD}"%")
        </if>
        <!-- 是否分解 -->
        <if test="pd.ISEXPLAIN != null and pd.ISEXPLAIN != '' and pd.ISEXPLAIN == '0'.toString()">
            AND IFNULL(s1.MONTH_COUNT_COUNT, 0) = 0
        </if>
        <if test="pd.ISEXPLAIN != null and pd.ISEXPLAIN != '' and pd.ISEXPLAIN == '1'.toString()">
            AND (IFNULL(s1.MONTH_COUNT_COUNT, 0) != 0 AND IFNULL(s2.YSX_MONTH_COUNT_COUNT, 0) = 0)
        </if>
        <if test="pd.ISEXPLAIN != null and pd.ISEXPLAIN != '' and pd.ISEXPLAIN == '2'.toString()">
            AND (IFNULL(s1.MONTH_COUNT_COUNT, 0) != 0 AND IFNULL(s2.YSX_MONTH_COUNT_COUNT, 0) != 0)
        </if>
        <choose>
            <when test="pd.sortKey != null and pd.sortKey != ''">
                order by ${pd.sortKey} ${pd.sortMethod}
            </when>
            <otherwise>
                ORDER BY
                t1.MONTH_START_DATE DESC,
                t2.CODE DESC,
                dept.ORDER_NUM,
                emp.EMP_NAME,
                t1.CREATE_TIME DESC
            </otherwise>
        </choose>
    </select>

    <!--通过id获取月度经营任务（部门）-->
    <select id="getMonthTaskById" parameterType="pd" resultType="pd">
        SELECT
            t1.*, dept.DEPT_NAME,
            dept.ID AS DEPT_ID,
            emp.EMP_NAME,
            pro.PRODUCT_NAME,
            t2.`NAME`,
            sta.`NAME` AS STATUS_NAME,
            s1.MONTH_COUNT_SUM,
            s1.MONEY_COUNT_SUM,
            b_index.INDEX_NAME,
            t2.TARGET_TYPE,
            IF (
                IFNULL(s1.MONTH_COUNT_COUNT, 0) = 0,
                '未分解',
                IF (
                    IFNULL(s2.YSX_MONTH_COUNT_COUNT, 0) = 0,
                    '已分解（未生效）',
                    '已分解（已生效）'
                )
            ) AS ISEXPLAIN
        FROM
            b_month_dept_task t1
        JOIN b_year_target t2 ON t1.B_YEAR_TARGET_CODE = t2.`CODE`
        JOIN b_year_dept_task deptYearTask ON t1.B_YEAR_DEPT_TASK_ID = deptYearTask.`ID`
        JOIN bd_department dept ON t1.DEPT_CODE = dept.DEPT_CODE
        JOIN bd_employee emp ON t1.EMP_CODE = emp.EMP_CODE
        LEFT JOIN bd_bussiness_index b_index ON (t2.INDEX_CODE = b_index.INDEX_CODE AND b_index.ISDEL = 0)
        LEFT JOIN bd_product pro ON (deptYearTask.PRODUCT_CODE = pro.PRODUCT_CODE AND pro.ISDEL = 0)
        LEFT JOIN sys_status sta ON (t1.`STATUS` = sta.BIANMA AND sta.TYPE = 2)
        LEFT JOIN (
            SELECT
                t3.B_MONTH_DEPT_TASK_ID,
                SUM(t3.MONTH_COUNT) AS MONTH_COUNT_SUM,
                SUM(t3.MONEY_COUNT) AS MONEY_COUNT_SUM,
                COUNT(1) AS MONTH_COUNT_COUNT
            FROM
                b_month_emp_target t3
            WHERE t3.ISDEL = 0
            GROUP BY
                t3.B_MONTH_DEPT_TASK_ID
        ) s1 ON (
            t1.ID = s1.B_MONTH_DEPT_TASK_ID
        )
        LEFT JOIN (
            SELECT
                t4.B_MONTH_DEPT_TASK_ID,
                COUNT(1) AS YSX_MONTH_COUNT_COUNT
            FROM
                b_month_emp_target t4
            WHERE
                t4.`STATUS` = 'YW_YSX'
            GROUP BY
                t4.B_MONTH_DEPT_TASK_ID
        ) s2 ON (
            t1.ID = s2.B_MONTH_DEPT_TASK_ID
        )
        WHERE
            t1.ISDEL = 0
        AND t1.ID = ${ID}
        AND t1.`STATUS` = 'YW_YSX'
    </select>

    <update id="deleteByYearTargetCode">
        update b_month_dept_task
        set isdel = 1,
            update_time = #{updateTime},
            update_user = #{updateUser}
        where B_YEAR_TARGET_CODE = #{yearTargetCode}
    </update>

    <!-- 根据ID删除部门月度经营目标 -->
    <update id="deleteById">
        update b_month_dept_task
        set isdel = 1,
            update_time = #{updateTime},
            update_user = #{updateUser}
        where id = #{id}
    </update>

    <!-- 根据ID获取部门月度经营目标 -->
    <select id="findById" resultType="pd">
        select * from b_month_dept_task where ID = #{id}
    </select>

    <!-- 新增部门月度经营目标 -->
    <insert id="add">
        INSERT INTO b_month_dept_task (
        <include refid="bMonthDeptTaskColumns"/>
        )VALUES(
        ${B_YEAR_DEPT_TASK_ID},
        #{B_YEAR_TARGET_CODE},
        #{DEPT_CODE},
        #{EMP_CODE},
        #{YEAR},
        #{MONTH},
        #{MONTH_START_DATE},
        #{MONTH_END_DATE},
        #{MONTH_COUNT},
        #{MONEY_COUNT},
        #{STATUS},
        0,
        #{createUser},
        #{createTime},
        #{updateUser},
        #{updateTime}
        )
    </insert>
</mapper>