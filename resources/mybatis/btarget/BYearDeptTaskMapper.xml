<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BYearDeptTaskMapper">

    <sql id="bYearDeptTaskColumns">
        B_YEAR_TARGET_CODE,
        DEPT_CODE,
        EMP_CODE,
        PRODUCT_CODE,
        COUNT,
        MONEY_COUNT,
        STATUS,
        ISDEL,
        CREATE_USER,
        CREATE_TIME,
        UPDATE_USER,
        UPDATE_TIME
    </sql>

    <!--批量新增-->
    <insert id="batchAdd" parameterType="java.util.List" flushCache="false">
        INSERT INTO b_year_dept_task (
        <include refid="bYearDeptTaskColumns"/>
        )
        VALUES
        <foreach item="item" index="index" collection="list" separator=",">
            (#{item.B_YEAR_TARGET_CODE},
            #{item.DEPT_CODE},
            #{item.EMP_CODE},
            #{item.PRODUCT_CODE},
            #{item.COUNT},
            #{item.MONEY_COUNT},
            #{item.STATUS},
            0,
            #{item.CREATE_USER},
            #{item.CREATE_TIME},
            #{item.UPDATE_USER},
            #{item.UPDATE_TIME}
            )
        </foreach>
    </insert>

    <insert id="add">
        INSERT INTO b_year_dept_task (
        <include refid="bYearDeptTaskColumns"/>
        )VALUES(
        #{B_YEAR_TARGET_CODE},
        #{DEPT_CODE},
        #{EMP_CODE},
        #{PRODUCT_CODE},
        #{COUNT},
        #{MONEY_COUNT},
        #{STATUS},
        0,
        #{CREATE_USER},
        #{CREATE_TIME},
        #{UPDATE_USER},
        #{UPDATE_TIME}
        )
    </insert>

    <!--批量更新-->
    <update id="batchUpdate" parameterType="pd">
        UPDATE b_year_dept_task
        SET
            DEPT_CODE = #{DEPT_CODE},
            EMP_CODE = #{EMP_CODE},
            COUNT = #{COUNT},
            MONEY_COUNT=#{MONEY_COUNT},
            `STATUS` = #{STATUS},
            ISDEL = 0,
            UPDATE_USER = #{UPDATE_USER},
            UPDATE_TIME = #{UPDATE_TIME}
        WHERE
            ID = ${ID};
    </update>

    <!--批量删除-->
    <update id="batchDelete" parameterType="pd">
        UPDATE b_year_dept_task
        SET
        ISDEL = 1
        WHERE
        1 = 1
        AND ID NOT IN (
        <foreach item="item" index="index" collection="update_ids" separator=",">
            ${item}
        </foreach>
        )
        AND B_YEAR_TARGET_CODE = #{B_YEAR_TARGET_CODE}
    </update>

    <update id="delete">
        update b_year_dept_task 
        set isdel = 1, 
            update_time = #{updateTime}, 
            update_user = #{updateUser} 
        where id = #{id}
    </update>

    <!-- 根据年度经营目标编号删除部门年度经营目标 -->
    <update id="deleteByYearTargetCode">
        update b_year_dept_task 
        set isdel = 1, 
            update_time = #{updateTime}, 
            update_user = #{updateUser} 
        where B_YEAR_TARGET_CODE = #{yearTargetCode}
    </update>

    <!--批量新增历史记录-->
    <insert id="batchHisAdd" parameterType="java.util.List" flushCache="false">
        INSERT INTO b_year_dept_task_his (
        <include refid="bYearDeptTaskColumns"/>
        )
        VALUES
        <foreach item="item" index="index" collection="list" separator=",">
            (#{item.B_YEAR_TARGET_CODE},
            #{item.DEPT_CODE},
            #{item.EMP_CODE},
            #{item.PRODUCT_CODE},
            #{item.COUNT},
            #{item.MONEY_COUNT},
            #{item.STATUS},
            0,
            #{item.UPDATE_USER},
            #{item.UPDATE_TIME},
            #{item.UPDATE_USER},
            #{item.UPDATE_TIME}
            )
        </foreach>
    </insert>

    <!--获取历史数据时间分组-->
    <select id="getHisTimeList" parameterType="String" resultType="pd">
        SELECT
            UPDATE_TIME,
            SUM(COUNT) AS COUNT_SUM
        FROM
            b_year_dept_task_his
        WHERE
            B_YEAR_TARGET_CODE = #{code}
        AND ISDEL = 0
        GROUP BY
            UPDATE_TIME
    </select>

    <!--按时间获取历史记录-->
    <select id="getHisListByTime" parameterType="pd" resultType="pd">
        SELECT
            t1.*, dept.DEPT_NAME,
            emp.EMP_NAME,
            p.PRODUCT_NAME
        FROM
            b_year_dept_task_his t1
        JOIN bd_department dept ON t1.DEPT_CODE = dept.DEPT_CODE
        JOIN bd_employee emp ON t1.EMP_CODE = emp.EMP_CODE
        join bd_product p on t1.product_code = p.product_code
        WHERE
            t1.B_YEAR_TARGET_CODE = #{CODE}
        AND t1.UPDATE_TIME = #{UPDATE_TIME}
        AND t1.ISDEL = 0
        ORDER BY
            t1.UPDATE_TIME DESC
    </select>

    <!-- 获取一级分解 -->
    <select id="getSupTaskList" resultType="pd">
		SELECT
		    task.ID,
		    task.B_YEAR_TARGET_CODE,
		    task.DEPT_CODE,
		    task.EMP_CODE,
		    task.STATUS,
		    dept.DEPT_NAME,
		    dept.ID AS DEPT_ID,
		    emp.EMP_NAME
		FROM
		    b_year_dept_task task,
		    bd_department dept,
		    bd_employee emp
		WHERE
		    task.DEPT_CODE = dept.DEPT_CODE
		AND task.EMP_CODE = emp.EMP_CODE
		AND task.ISDEL = 0
		AND task.B_YEAR_TARGET_CODE = #{code}
		GROUP BY
		    task.DEPT_CODE
    </select>

    <!-- 获取下级分解 -->
    <select id="getTaskBySuper" resultType="pd">
        SELECT
		    *
		FROM
		    b_year_dept_task
		WHERE
		    ISDEL = 0
		AND B_YEAR_TARGET_CODE = #{B_YEAR_TARGET_CODE}
		AND DEPT_CODE = #{DEPT_CODE}
    </select>

    <!--获取目标的现有拆分-->
    <select id="getTaskList" parameterType="String" resultType="pd">
        SELECT
            *, dept.DEPT_NAME,
            dept.ID AS DEPT_ID,
            emp.EMP_NAME
        FROM
            b_year_dept_task t1
        JOIN bd_department dept ON t1.DEPT_CODE = dept.DEPT_CODE
        JOIN bd_employee emp ON t1.EMP_CODE = emp.EMP_CODE
        WHERE
            B_YEAR_TARGET_CODE = #{code}
        AND ISDEL = 0
    </select>

    <!-- 下发目标分解 -->
    <update id="arrange" parameterType="pd">
        UPDATE b_year_dept_task
        SET `STATUS` = 'YW_YSX',
         UPDATE_TIME = #{UPDATE_TIME},
         UPDATE_USER = #{UPDATE_USER}
        WHERE
            B_YEAR_TARGET_CODE = #{CODE}
    </update>

    <select id="listPage" parameterType="page" resultType="pd">
        select deptTask.ID, deptTask.B_YEAR_TARGET_CODE, deptTask.DEPT_CODE, deptTask.EMP_CODE, deptTask.COUNT,
        deptTask.STATUS,
        deptTask.ISDEL, deptTask.CREATE_USER, deptTask.CREATE_TIME, deptTask.UPDATE_USER, deptTask.UPDATE_TIME,
        target.NAME,
        target.START_DATE, target.END_DATE, pro.PRODUCT_NAME, b_index.INDEX_NAME, unit.UNIT_NAME, dept.ID DEPT_ID,
        dept.DEPT_NAME,
        emp.EMP_NAME, sys_status.NAME AS STATUS_NAME, IF(deptTask.EMP_CODE = #{pd.USER_NUMBER}, 'YOURS', 'NOT_YOURS')
        IS_YOURS,
        IFNULL(monthDeptTask.MONTH_COUNT_SUM, 0) AS MONTH_COUNT_SUM, deptTask.EXPLAIN_EMP_CODE,
        IF( IFNULL(monthDeptTask.MONTH_TASK_COUNT, 0) = 0, '未分解',
        IF( IFNULL(monthDeptTask2.MONTH_TASK_COUNT, 0) = 0, '已分解（未生效）', '已分解（已生效）')
        ) AS ISEXPLAIN
        from b_year_dept_task deptTask
        left join b_year_target target on target.CODE = deptTask.B_YEAR_TARGET_CODE and target.ISDEL=0
        left join bd_product pro ON deptTask.PRODUCT_CODE = pro.PRODUCT_CODE AND pro.ISDEL = 0
        left join sys_status ON sys_status.BIANMA = deptTask.STATUS AND sys_status.TYPE = 2
        left join bd_unit unit ON target.UNIT_CODE = unit.UNIT_CODE AND unit.ISDEL = 0
        left join bd_bussiness_index b_index ON target.INDEX_CODE = b_index.INDEX_CODE AND b_index.ISDEL = 0
        left join bd_department dept ON deptTask.DEPT_CODE = dept.DEPT_CODE
        left join bd_employee emp ON deptTask.EMP_CODE = emp.EMP_CODE
        left join (
        SELECT B_YEAR_DEPT_TASK_ID,COUNT(1) AS MONTH_TASK_COUNT, SUM(MONTH_COUNT) AS MONTH_COUNT_SUM
        FROM b_month_dept_task GROUP BY B_YEAR_DEPT_TASK_ID
        ) monthDeptTask on deptTask.ID = monthDeptTask.B_YEAR_DEPT_TASK_ID
        left join (
        SELECT B_YEAR_DEPT_TASK_ID, COUNT(1) AS MONTH_TASK_COUNT
        FROM b_month_dept_task WHERE STATUS = 'YW_YSX' GROUP BY B_YEAR_DEPT_TASK_ID
        ) monthDeptTask2 ON deptTask.ID = monthDeptTask2.B_YEAR_DEPT_TASK_ID
        where deptTask.ISDEL = 0 and deptTask.STATUS = 'YW_YSX'
        <if test="pd.showOtherDept==0">
            and (
            deptTask.EMP_CODE = #{pd.USER_NUMBER}
            or deptTask.EXPLAIN_EMP_CODE = #{pd.USER_NUMBER}<!-- 指定负责人 -->
            <!-- 2016-07-07 yangdw 加入数据权限 -->
            <if test="pd.sysDeptArr != null and pd.sysDeptArr != ''">
                OR deptTask.DEPT_CODE IN (
                <foreach item="item" index="index" collection="pd.sysDeptArr" separator=",">
                    '${item}'
                </foreach>
                )
            </if>
            )
        </if>
        <if test="pd.showOtherDept==1">
            and deptTask.CREATE_USER = #{pd.USER_NAME} and dept.ID != #{pd.USER_DEPT_ID}
        </if>
        <!-- 起始时间检索 -->
        <if test="pd.START_DATE != null and pd.START_DATE != ''">
            and target.START_DATE &gt;= #{pd.START_DATE}
        </if>
        <!-- 结束时间检索 -->
        <if test="pd.END_DATE != null and pd.END_DATE != ''">
            and target.END_DATE &lt;= #{pd.END_DATE}
        </if>
        <!-- 状态检索 -->
        <if test="pd.STATUS != null and pd.STATUS != ''">
            and deptTask.STATUS = #{pd.STATUS}
        </if>
        <!-- 产品检索 -->
        <if test="pd.PRODUCT_CODE != null and pd.PRODUCT_CODE != ''">
            and target.PRODUCT_CODE = #{pd.PRODUCT_CODE}
        </if>
        <!-- 关键字 -->
        <if test="pd.KEY_WORD != null and pd.KEY_WORD != ''">
            and (target.NAME like "%"#{pd.KEY_WORD}"%" or target.CODE like "%"#{pd.KEY_WORD}"%")
        </if>
        <!-- 是否分解 -->
        <if test="pd.ISEXPLAIN != null and pd.ISEXPLAIN != '' and pd.ISEXPLAIN == '0'.toString()">
            and IFNULL(monthDeptTask.MONTH_TASK_COUNT, 0) = 0
        </if>
        <if test="pd.ISEXPLAIN != null and pd.ISEXPLAIN != '' and pd.ISEXPLAIN == '1'.toString()">
            and (IFNULL(monthDeptTask.MONTH_TASK_COUNT, 0) != 0 and IFNULL(monthDeptTask2.MONTH_TASK_COUNT, 0) = 0)
        </if>
        <if test="pd.ISEXPLAIN != null and pd.ISEXPLAIN != '' and pd.ISEXPLAIN == '2'.toString()">
            and IFNULL(monthDeptTask2.MONTH_TASK_COUNT, 0) != 0
        </if>
        <choose>
            <when test="pd.sortKey != null and pd.sortKey != ''">
                order by ${pd.sortKey} ${pd.sortMethod}
            </when>
            <otherwise>
                order by target.START_DATE desc, target.END_DATE desc, target.CODE desc, dept.ORDER_NUM, emp.EMP_NAME,
                deptTask.CREATE_TIME desc
            </otherwise>
        </choose>
    </select>

    <!-- 年度经营任务（部门）列表 -->
    <select id="getTaskById" parameterType="pd" resultType="pd">
        SELECT
            t1.*, dept.DEPT_NAME,
            emp.EMP_NAME,
            pro.PRODUCT_NAME,
            t2.`NAME`,
            t2.START_DATE,
            t2.END_DATE,
            sta.`NAME` AS STATUS_NAME,
            b_index.INDEX_NAME,
            t2.`YEAR` AS YEAR_NUM,
            s1.COUNT_SUM,
            t2.TARGET_TYPE,
            IF (
                IFNULL(s1.MONTH_COUNT_COUNT, 0) = 0,
                '未分解',
                IF (
                    IFNULL(s2.YSX_MONTH_COUNT_COUNT, 0) = 0,
                    '已分解（未生效）',
                    '已分解（已生效）'
                )
            ) AS ISEXPLAIN
        FROM
            b_year_dept_task t1
        JOIN b_year_target t2 ON t1.B_YEAR_TARGET_CODE = t2.`CODE`
        JOIN bd_department dept ON t1.DEPT_CODE = dept.DEPT_CODE
        JOIN bd_employee emp ON t1.EMP_CODE = emp.EMP_CODE
        LEFT JOIN bd_product pro ON (t1.PRODUCT_CODE = pro.PRODUCT_CODE AND pro.ISDEL = 0)
        LEFT JOIN sys_status sta ON (t1.`STATUS` = sta.BIANMA AND sta.TYPE = 2)
        LEFT JOIN bd_bussiness_index b_index ON (t2.INDEX_CODE = b_index.INDEX_CODE AND b_index.ISDEL = 0)
        LEFT JOIN (
            SELECT
                t3.B_YEAR_DEPT_TASK_ID,
                SUM(t3.MONTH_COUNT) AS COUNT_SUM,
                COUNT(1) AS MONTH_COUNT_COUNT
            FROM
                b_month_dept_task t3
            WHERE t3.ISDEL = 0
            GROUP BY
                t3.B_YEAR_DEPT_TASK_ID
        ) s1 ON (
            t1.ID = s1.B_YEAR_DEPT_TASK_ID
        )
                LEFT JOIN (
            SELECT
                t4.B_YEAR_DEPT_TASK_ID,
                COUNT(1) AS YSX_MONTH_COUNT_COUNT
            FROM
                b_month_dept_task t4
            WHERE
                t4.`STATUS` = 'YW_YSX'
                and t4.isdel = 0
            GROUP BY
                t4.B_YEAR_DEPT_TASK_ID
        ) s2 ON (
            t1.ID = s2.B_YEAR_DEPT_TASK_ID
        )
        WHERE
            t1.ISDEL = 0
        AND t1.ID = ${ID}
    </select>

    <select id="findById" resultType="pd">
        select * from b_year_dept_task where id = #{id}
    </select>

    <!-- 更新部门年度目标的指定分解人 -->
    <update id="updateExplainEmp" parameterType="pd">
    	update b_year_dept_task
    	set EXPLAIN_EMP_CODE=#{explainEmpCode} where ID=#{id}
    </update>

</mapper>